import java.util.Scanner;

public class TEST {   //边界尚未完善，即需要考虑最外层跟次外层的越界情况 
    //可优化为一个函数 加一个参数代表判定3或判定5 未完成
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int[][] chess = new int[15][15];
        for (int i=0;i<chess.length;i++){
            for (int j=0;j<chess[0].length;j++){
                chess[i][j]=0;   //初始化棋盘
            }
        }
        for (int i=0;i<chess.length;i++){
            for (int j=0;j<chess[0].length;j++){
                System.out.print(chess[i][j]+" ");   //初始化棋盘
            }
            System.out.println();
        }

        int flag=0;
        int color=1;    //用个String数组就可以表示黑/白 未完成

        do {
            int a = input.nextInt();
            int b = input.nextInt();

            if (checkIfAgain(a,b,chess)){    //判断当前位置有没有子
                System.out.println("wrong location, try again");
                continue;
            }

            chess[a][b]=color;

            if (checkthreetot(a,b,chess)){   //判断双三且不影响获胜
                chess[a][b]=0;
                System.out.println("wrong location, try again");
                continue;
            }


            for (int i=0;i<chess.length;i++){   //打印当前棋盘
                for (int j=0;j<chess[0].length;j++){
                    System.out.print(chess[i][j]+" ");
                }
                System.out.println();
            }

            if (color==1){   //换边
                color=2;
            }
            else {
                color=1;
            }

            System.out.println("it's "+color+ "'s turn");

            if (checktot(a,b,chess)){
                flag=1;
                System.out.println("you win");
            }
        }while (flag!=1);
    }

    private static boolean checkIfAgain(int x, int y, int[][] chess){   //判断当前位置有没有子
        return chess[x][y]!=0;
    }

    private static boolean checkstep(int x, int y, int[][] chess, int directx, int directy){
        //direct表示搜索的方向 (1,0)表示搜索上下 (0,1)表示搜索左右 (1,1)表示搜索左上右下 (-1,1)表示搜索右上左下

        int count = 0;
        for (int i=1;i<5;i++){
            int tempx = x;
            int tempy = y;
            tempx += i*directx;
            tempy += i*directy;
            if (chess[tempx][tempy]!=chess[x][y]){
                break;
            }
            count++;
        }
        for (int i=1;i<5;i++){
            int tempx = x;
            int tempy = y;
            tempx -= i*directx;
            tempy -= i*directy;
            if (chess[tempx][tempy]!=chess[x][y]){
                break;
            }
            count++;
        }
        return count >= 4;
    }

    private static boolean checktot(int x, int y, int[][] chess){
        if (checkstep(x,y,chess,1,0)){
            return true;
        }
        if (checkstep(x,y,chess,0,1)){
            return true;
        }
        if (checkstep(x,y,chess,1,1)){
            return true;
        }
        if (checkstep(x,y,chess,-1,1)){
            return true;
        }
        else return false;
    }

    private static boolean checkthreestep(int x, int y, int[][] chess, int directx, int directy){    //检查双3的重复
        //direct表示搜索的方向 (1,0)表示搜索上下 (0,1)表示搜索左右 (1,1)表示搜索左上右下 (-1,1)表示搜索右上左下

        int count = 0;
        int countblack = 0;
        for (int i=1;i<3;i++){
            int tempx = x;
            int tempy = y;
            tempx += i*directx;
            tempy += i*directy;
            if (chess[tempx][tempy]!=chess[x][y]){
                if(chess[tempx][tempy]!=0){
                    countblack++;
                }
                break;
            }
            count++;
        }
        for (int i=1;i<3;i++){
            int tempx = x;
            int tempy = y;
            tempx -= i*directx;
            tempy -= i*directy;
            if (chess[tempx][tempy]!=chess[x][y]){
                if(chess[tempx][tempy]!=0){
                    countblack++;
                }
                break;
            }
            count++;
        }
        return count >= 2 && countblack != 0;
    }

    private static boolean checkthreetot(int x, int y, int[][] chess){    //若有两个方向大于等于3子
        int tot = 0;
        if (checkthreestep(x,y,chess,1,0)){
            tot++;
        }
        if (checkthreestep(x,y,chess,0,1)){
            tot++;
        }
        if (checkthreestep(x,y,chess,1,1)){
            tot++;
        }
        if (checkthreestep(x,y,chess,-1,1)){
            tot++;
        }
        return tot >= 2;
    }

}
